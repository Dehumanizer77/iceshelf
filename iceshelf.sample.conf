# The sources section points out both files and folders that
# needs to be backed up. Wildcard is not allowed, tool will
# always recurse into directories.
#
[sources]

# Some extra paths needed by the tool.
# "prep dir" is used for temporary storage (creating archive, signing etc)
# "data dir" is used for storing information needed to track changes
# "done dir" is used for storing successfully backed up archives. Each backup is
#            stored in its own folder. Note! It copies and then deletes,
#            so needs extra space. Leave blank to disable.
#
[paths]
prep dir: /tmp/
data dir: data/
done dir:

# Allows tweaking the tool
# "max size" sets an upper limit of the archive's uncompressed size. Note! If
#            parity is enabled, max size is automaticallt restricted to 32GB or
#            less due to limitations in PAR2
#
#            NOTE! Due to the stage-by-stage nature of this tool, you should be
#                  aware that it will at times consume twice the space for temporary
#                  files. So while max size defines the max size of the content
#                  grabbed, it does not limit the end-result (which can vary, see
#                  security section) nor does it take temp files into account.
#
# "change method" determines how changes are detected. "data" uses sha1 of
#                 the data while "meta" uses a combination of file size and
#                 last modification date. "data" is more accurate but much
#                 slower. You can also specify sha256 or sha512 explicityly
#                 depending on your needs. For most users, data (sha1) is enough
#                 and will also have the benefit of being fairly quick.
# "delta manifest" Store a copy of the manifest as well
#
# "compress" yes/no/force - Normally yes, no disables and force ignores internal rules.
#                           Uses bzip2 compression.
#
# "persuasive" Normally no, but if yes, will try and fit as many files into the
#              maxsize restriction, leaving some for another day. This results
#              in a more uniform sized uploads, no data will ever be lost, it
#              just will come at a later session. TODO
#
# "ignore overlimit" will cause iceshelf to return 0 even if files were skipped.
#                    However, if there are more files which WOULD fit, it will work
#                    as expected (ie, tell you to run it again).
#
# "incompressible" allows you to add additional extensions for files which won't
#                  compress very well. To add more than one, separate them using space.
# "max keep" allows you to automatically keep a max of X backups in the done folder.
#            If done folder is undefined, this option has no effect. If the folder exists
#            but this option is blank or zero, there is no limit (unlimited)
#
# "prefix" is optional, but when available defines a prefix to be added to all
#          generated backup files (so you can store more than one backup in the same vault)
#
[options]
max size:
change method: data
delta manifest: yes
compress: yes
persuasive: yes
ignore overlimit: no
incompressible:
max keep: 0
prefix: backup

# Exclusion rules
# All rules are processed in the order they are defined, as soon as a rule
# matches, it will stop processing the rest.
#
# Rules are defined by <name>=<rule> where name can be whatever you want.
# rule without any special prefix is simply a textual match of the complete
# filename including the path. However, this can be extended by the following
# prefixes:
#
# *<rule>   Matches from the end of the filename instead of start
# ?<rule>   Matches any part of the filename
# ><rule>   Tests the filesize, if bigger than <rule>, then it's excluded
# <<rule>   Tests the filesize, if less than <rule>, the it's excluded
#
# There is also a special modifier which you can prefix the entire rule with.
# By adding an exclamationmark, you invert the rule. Now if it matches the
# content WILL be included. That allows for some snazzy rules such as:
#
#  [exclude]
#  alldocs=!*.doc
#  no odd dirs=/some/odd/dir/
#
# In a structure like this:
#  /some/
#  /some/data.txt
#  /some/todo.doc
#  /some/odd/dir/
#  /some/odd/dir/moredata.txt
#  /some/odd/dir/readme.doc
#
# It will backup the following:
#  /some/data.txt
#  /some/todo.doc
#  /some/odd/dir/readme.doc
#
# Notice how it snagged a file from inside an excluded folder? Pretty
# convenient. However, in order for this to work, you must consider the
# order of the rules. If you change the order to:
#
#  [exclude]
#  no odd dirs=/some/odd/dir/
#  alldocs=!*.doc
#
# The "no odd dirs" would trigger first and the second rule would never get a
# chance to be evaluated. If you're having issues with the rules, consider
# running iceshelf with --changes and --debug to see what it's doing.
#
[exclude]

# Amazon Glacier settings.
#
# Iceshelf uses glacier-cmd for uploading the backups, it doesn't actually use
# talk directly itself. Thus all you need to provide is a config file which
# has all the necessary options.
#
# "config" points out a valid glacier-cmd config
# "vault" points out a nice vault to place the backups in. If the vault is
#         missing, it will be created automatically.
#
[glacier]
config: /home/user/glacier-backup.conf
vault: A-really-good-name-for-where-you-keep-backups


# Security settings
# "encrypt" and "sign" points out a GPG identity (typical email address) to use
# for encryption and signatures. If they need a passphrase, use companion settings.
# "add parity" creates a parity file which can replace anywhere from 1 to 100%,
# 0 is off
#
# Encryption adds ~1% to the size of the archive, signature is has negligible
# impact on size. Parity roughly adds the percentage you define
# (on top of the encryption penalty)
#
[security]
encrypt:
encrypt phrase:
sign:
sign phrase:
add parity: 0
